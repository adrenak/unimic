{
  "api/Adrenak.UniMic.html": {
    "href": "api/Adrenak.UniMic.html",
    "title": "Namespace Adrenak.UniMic | UniMic documentation",
    "keywords": "Namespace Adrenak.UniMic Classes Mic Mic.Device Provides information and APIs for a single recording device. MicAudioSource A simple AudioSource based component that just plays what the Mic instance is receiving. Provides optional feature to start the recording by itself (as a testing tool)"
  },
  "api/Adrenak.UniMic.Mic.Device.html": {
    "href": "api/Adrenak.UniMic.Mic.Device.html",
    "title": "Class Mic.Device | UniMic documentation",
    "keywords": "Class Mic.Device Provides information and APIs for a single recording device. Inheritance System.Object Mic.Device Namespace : Adrenak.UniMic Assembly : cs.temp.dll.dll Syntax public class Device Properties ChannelCount The number of channels the audio is captured into. Note that this value is made available ONLY after recording starts and resets to 0 when it stops. Also note that depending on the device, channel count can be changed while the recording is ongoing use OnFrameCollected to react to such changes. Declaration public int ChannelCount { get; } Property Value Type Description System.Int32 FrameDurationMS The duration of the audio frame (in milliseconds) that would be reported by the device. Note that, for example, setting this value to 50 does not mean you would predictably receive 20 frames representing 50ms of audio at fixed and regular intervals. Often times, sent multiple may be sent multiple times in a single frame or with the intervals between the frames. For playback, consider creating a buffer. See MicAudioSource for references. Declaration public int FrameDurationMS { get; } Property Value Type Description System.Int32 FrameLength The length of a single PCM frame array that will be sent via OnFrameCollected Declaration public int FrameLength { get; } Property Value Type Description System.Int32 IsRecording Whether this device is currently recording audio Declaration public bool IsRecording { get; } Property Value Type Description System.Boolean MaxFrequency The maximum sampling frequency this device supports Declaration public int MaxFrequency { get; } Property Value Type Description System.Int32 MinFrequency The minimum sampling frequency this device supports Declaration public int MinFrequency { get; } Property Value Type Description System.Int32 Name The name of the recording device Declaration public string Name { get; } Property Value Type Description System.String SamplingFrequency The sampling frequency this device will record at Declaration public int SamplingFrequency { get; } Property Value Type Description System.Int32 SupportsAnyFrequency If this device is capable of supporting any sampling frequency Declaration public bool SupportsAnyFrequency { get; } Property Value Type Description System.Boolean VolumeMultiplier Multiplies the incoming PCM samples by the given value to increase/decrease the volume. Default: 1 Declaration public float VolumeMultiplier { get; set; } Property Value Type Description System.Single Methods StartRecording(Int32) Start recording audio using this device at the maximum supported sampling frequency and given frame duration Declaration public void StartRecording(int frameDurationMS = 20) Parameters Type Name Description System.Int32 frameDurationMS The audio length of one frame (in MS) StartRecording(Int32, Int32) Start recording audio using this device at the provided sampling frequency and frame duration Declaration public void StartRecording(int samplingFrequency, int frameDurationMS = 20) Parameters Type Name Description System.Int32 samplingFrequency System.Int32 frameDurationMS StopRecording() Stop recording audio Declaration public void StopRecording() Events OnFrameCollected Invoked everytime an audio sample is collected. Params: channel count, float pcm array You use the channel count to be able to react to it changing Declaration public event Action<int, float[]> OnFrameCollected Event Type Type Description System.Action < System.Int32 , System.Single []> OnStartRecording Invoked when the instance starts Recording. Declaration public event Action OnStartRecording Event Type Type Description System.Action OnStopRecording Invoked when the instance stop Recording. Declaration public event Action OnStopRecording Event Type Type Description System.Action"
  },
  "api/Adrenak.UniMic.Mic.html": {
    "href": "api/Adrenak.UniMic.Mic.html",
    "title": "Class Mic | UniMic documentation",
    "keywords": "Class Mic Inheritance System.Object Mic Namespace : Adrenak.UniMic Assembly : cs.temp.dll.dll Syntax public class Mic : MonoBehaviour Constructors Mic() Declaration [Obsolete(\"Mic is a MonoBehaviour class. Use Mic.Instance to get the instance\", true)] public Mic() Properties AvailableDevices Gets the available recording devices Declaration public static List<Mic.Device> AvailableDevices { get; } Property Value Type Description System.Collections.Generic.List < Mic.Device > Methods Init() Initialize the Mic class for use. Declaration public static void Init()"
  },
  "api/Adrenak.UniMic.MicAudioSource.html": {
    "href": "api/Adrenak.UniMic.MicAudioSource.html",
    "title": "Class MicAudioSource | UniMic documentation",
    "keywords": "Class MicAudioSource A simple AudioSource based component that just plays what the Mic instance is receiving. Provides optional feature to start the recording by itself (as a testing tool) Inheritance System.Object MicAudioSource Namespace : Adrenak.UniMic Assembly : cs.temp.dll.dll Syntax public class MicAudioSource : MonoBehaviour Fields autoStart Declaration public bool autoStart Field Value Type Description System.Boolean bufferDurationMS Declaration public int bufferDurationMS Field Value Type Description System.Int32 Properties Device Declaration public Mic.Device Device { get; } Property Value Type Description Mic.Device Methods SetDevice(Mic.Device, Boolean) Declaration public void SetDevice(Mic.Device device, bool autoStart = false) Parameters Type Name Description Mic.Device device System.Boolean autoStart SetDeviceByName(String, Boolean) Declaration public void SetDeviceByName(string deviceName, bool autoStart = false) Parameters Type Name Description System.String deviceName System.Boolean autoStart StartRecording() Declaration public void StartRecording() StopRecording() Declaration public void StopRecording()"
  },
  "api/Adrenak.UniMic.Samples.html": {
    "href": "api/Adrenak.UniMic.Samples.html",
    "title": "Namespace Adrenak.UniMic.Samples | UniMic documentation",
    "keywords": "Namespace Adrenak.UniMic.Samples Classes MicDeviceCell MicDeviceListSample"
  },
  "api/Adrenak.UniMic.Samples.MicDeviceCell.html": {
    "href": "api/Adrenak.UniMic.Samples.MicDeviceCell.html",
    "title": "Class MicDeviceCell | UniMic documentation",
    "keywords": "Class MicDeviceCell Inheritance System.Object MicDeviceCell Namespace : Adrenak.UniMic.Samples Assembly : cs.temp.dll.dll Syntax public class MicDeviceCell : MonoBehaviour Fields deviceNameText Declaration public Text deviceNameText Field Value Type Description Text isRecordingToggle Declaration public Toggle isRecordingToggle Field Value Type Description Toggle rmsIndicator Declaration public Image rmsIndicator Field Value Type Description Image Methods SetDeviceName(String) Declaration public void SetDeviceName(string name) Parameters Type Name Description System.String name SetIsRecording(Boolean) Declaration public void SetIsRecording(bool state) Parameters Type Name Description System.Boolean state SetRMS(Single) Declaration public void SetRMS(float value) Parameters Type Name Description System.Single value"
  },
  "api/Adrenak.UniMic.Samples.MicDeviceListSample.html": {
    "href": "api/Adrenak.UniMic.Samples.MicDeviceListSample.html",
    "title": "Class MicDeviceListSample | UniMic documentation",
    "keywords": "Class MicDeviceListSample Inheritance System.Object MicDeviceListSample Namespace : Adrenak.UniMic.Samples Assembly : cs.temp.dll.dll Syntax public class MicDeviceListSample : MonoBehaviour"
  },
  "index.html": {
    "href": "index.html",
    "title": "UniMic | UniMic documentation",
    "keywords": "UniMic A wrapper for Unity's Microphone class. Proving easy APIs for mic input and management. API Scripting API page and more documentation coming soon. Usage Mic.Init() to initialize UniMic Mic.AvailableDevices to get a list of available Mic.Device objects The following API is available in Mic.Device : DEFAULT_FRAME_DURATION_MS the default length of the frame in milliseconds. OnStartRecording event fired when the device starts recording OnFrameCollected event fired when the device has gathered PCM data for one frame of user defined duration. Parameters: int, float[] the channel count and PCM float array of the frame OnStopRecording event fired when the device stops recording Name gets the name of the device MaxFrequency is the highest sampling frequency supported by the device MinFrequency is the lowest sampling frequency supported by the device VolumeMultiplier increases/decreases volume by multiplying PCM samples SupportsAnyFrequency is true if the recording device supports any sampling frequeny SamplingFrequency is the user defined frequency at which is device will record FrameDurationMS is the audio duration of a single PCM frame that this device will report in the OnFrameCollected event FrameLength is the length of the float PCM array this device will report in the OnFrameCollected event StartRecoring() starts the device recording at the highest supported sampling frequency and the default frame duration defined by DEFAULT_FRAME_DURATION_MS StartRecording(int frameDurationMS) starts the device recording at the highest supported sampling frequency and the user defined frame duration StartRecording(int samplingFrequency, int frameDurationMS) starts the device recording at the user defined sampling frequency and frame duration StopRecording() stops the device recording IsRecording returns if the device is currently recording audio MicAudioSource component is available for playing back microphone feed. This class is also a good reference for writing your own code for incoming audio data. This class includes: autoStart configurable in the editor. Whether the component should automatically start playing back audio from the first device detected Device is a reference to the device this object it currently playing bufferDurationMS is the length in milliseconds of the internal audio buffer that the object uses. The value defined here is also the time it would take for playback to start and the latency between audio capture and playback SetDeviceByName(string deviceName, bool autoStart = false) changes the device this instance is playing. If autoStart is true, it automatically starts playing the audio being captured by the new device. SetDevice(Mic.Device device, bool autoStart = false) similar to SetDeviceByName except it takes a Mic.Device object as the first parameter. This is recommended over SetDeviceByName StartRecording starts/resumes the recording. A device MUST be registered using SetDevice or SetDeviceByName method before calling this. StopRecording stops the recording. Samples View Basic MicAudioSource Sample for single mic sample View Multiple Mic UI Sample for a more complicated sample that shows all the available mics on a UI and allows you to mute/unmute them. Note Some Xiaomi phones may prevent side loaded APKs from functioning. There is no AEC (Acoustic Echo Cancelletion). If you're trying the samples be sure to use headphones to avoid creating a feedback loop. Contact @github @website @discord: adrenak#1934"
  }
}